generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  name            String            @unique
  hashedPassword  String?
  point           Int               @default(1000)
  avatarPath      String?
  chatroomOwners  Chatroom[]
  chatroomAdmins  ChatroomAdmin[]
  chatroomMembers ChatroomMembers[]
  loseGameRecord  GameRecord[]      @relation("Loser")
  winGameRecord   GameRecord[]      @relation("Winner")
  messages        Message[]
}

model Chatroom {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  name           String
  type           ChatroomType      @default(PUBLIC)
  ownerId        Int
  hashedPassword String?
  owner          User              @relation(fields: [ownerId], references: [id])
  admins         ChatroomAdmin[]
  members        ChatroomMembers[]
  messages       Message[]
}

model ChatroomMembers {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  chatroomId Int
  userId     Int
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         Int      @id @default(autoincrement())
  userId     Int
  message    String
  chatroomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
}

model ChatroomAdmin {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  chatroomId Int
  userId     Int
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameRecord {
  id          Int      @id @default(autoincrement())
  winnerScore Int
  loserScore  Int
  createdAt   DateTime @default(now())
  loserId     Int
  winnerId    Int
  loser       User     @relation("Loser", fields: [loserId], references: [id])
  winner      User     @relation("Winner", fields: [winnerId], references: [id])
}

enum ChatroomType {
  PUBLIC
  PRIVATE
  PROTECTED
}
