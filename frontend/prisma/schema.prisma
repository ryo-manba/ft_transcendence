generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatroom {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  name            String
  type            ChatroomType      @default(PUBLIC)
  ownerId         Int
  hashedPassword  String?
  User            User              @relation(fields: [ownerId], references: [id])
  ChatroomAdmin   ChatroomAdmin[]
  ChatroomMembers ChatroomMembers[]
  Message         Message[]
}

model ChatroomAdmin {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  chatroomId Int
  userId     Int
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatroomId, userId])
  @@unique([chatroomId, userId])
}

model ChatroomMembers {
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @default(now())
  chatroomId Int
  userId     Int
  status     ChatroomMembersStatus @default(NORMAL)
  endAt      DateTime?
  startAt    DateTime?
  Chatroom   Chatroom              @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatroomId, userId])
  @@unique([chatroomId, userId])
}

model FriendRelation {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  followerId  Int
  followingId Int
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followingId, followerId])
  @@unique([followingId, followerId])
}

model GameRecord {
  id          Int      @id @default(autoincrement())
  winnerScore Int
  loserScore  Int
  createdAt   DateTime @default(now())
  loserId     Int
  winnerId    Int
  loser       User     @relation("Loser", fields: [loserId], references: [id])
  winner      User     @relation("Winner", fields: [winnerId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  userId     Int
  message    String
  chatroomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id])
}

model User {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  name            String            @unique
  hashedPassword  String?
  point           Int               @default(1000)
  avatarPath      String?
  status          UserStatus        @default(OFFLINE)
  has2FA          Boolean           @default(false)
  oAuthId         String?           @unique
  secret2FA       String            @default("")
  Chatroom        Chatroom[]
  ChatroomAdmin   ChatroomAdmin[]
  ChatroomMembers ChatroomMembers[]
  followers       FriendRelation[]  @relation("follower")
  followings      FriendRelation[]  @relation("following")
  loseGameRecord  GameRecord[]      @relation("Loser")
  winGameRecord   GameRecord[]      @relation("Winner")
  Message         Message[]
}

enum ChatroomType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum UserStatus {
  ONLINE
  PLAYING
  OFFLINE
}

enum ChatroomMembersStatus {
  NORMAL
  BAN
  MUTE
}
