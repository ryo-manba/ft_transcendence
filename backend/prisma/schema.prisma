generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  name           String          @unique
  hashedPassword String?
  point          Int             @default(1000)
  avatarPath     String?
  chatroom       Chatroom[]
  chatroomAdmin  ChatroomAdmin[]
  loseGameRecord GameRecord[]    @relation("Loser")
  winGameRecord  GameRecord[]    @relation("Winner")
  message        Message[]
}

// オーナー -> チャットルーム作成者(管理者権限も持つ)
// 管理者   -> あとから追加できる(複数人)
model Chatroom {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  name           String
  type           ChatroomType    @default(PUBLIC)
  owner          User            @relation(fields: [ownerId], references: [id])
  ownerId        Int
  hashedPassword String?
  message        Message[]
  admin          ChatroomAdmin[]
}

enum ChatroomType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  message    String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade) // Roomが消されたらメッセージも削除される
  chatroomId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model ChatroomAdmin {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade) // Roomが消されたらメッセージも削除される
  chatroomId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model GameRecord {
  id          Int      @id @default(autoincrement())
  winnerScore Int
  loserScore  Int
  createdAt   DateTime @default(now())
  loserId     Int
  winnerId    Int
  loser       User     @relation("Loser", fields: [loserId], references: [id])
  winner      User     @relation("Winner", fields: [winnerId], references: [id])
}
