generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameRecord {
  id                             Int      @id @default(autoincrement())
  winnerScore                    Int
  loserScore                     Int
  createdAt                      DateTime @default(now())
  loserId                        Int
  winnerId                       Int
  User_GameRecord_loserIdToUser  User     @relation("GameRecord_loserIdToUser", fields: [loserId], references: [id])
  User_GameRecord_winnerIdToUser User     @relation("GameRecord_winnerIdToUser", fields: [winnerId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  userId     Int
  message    String
  chatroomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id])
}

model User {
  id                                   Int             @id @default(autoincrement())
  createdAt                            DateTime        @default(now())
  updatedAt                            DateTime        @default(now())
  name                                 String
  email                                String          @unique
  hashedPassword                       String?
  elo                                  Int             @default(1000)
  Chatroom                             Chatroom[]
  ChatroomAdmin                        ChatroomAdmin[]
  GameRecord_GameRecord_loserIdToUser  GameRecord[]    @relation("GameRecord_loserIdToUser")
  GameRecord_GameRecord_winnerIdToUser GameRecord[]    @relation("GameRecord_winnerIdToUser")
  Message                              Message[]
}

model Chatroom {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  name           String
  type           ChatroomType    @default(PUBLIC)
  ownerId        Int
  hashedPassword String?
  User           User            @relation(fields: [ownerId], references: [id])
  ChatroomAdmin  ChatroomAdmin[]
  Message        Message[]
}

model ChatroomAdmin {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  chatroomId Int
  userId     Int
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ChatroomType {
  PUBLIC
  PRIVATE
  PROTECTED
}
